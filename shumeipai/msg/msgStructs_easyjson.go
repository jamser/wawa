// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package msg

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson87c59537DecodeZhuawawaMsg(in *jlexer.Lexer, out *SCWawaList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			if in.IsNull() {
				in.Skip()
				out.Records = nil
			} else {
				in.Delim('[')
				if out.Records == nil {
					if !in.IsDelim(']') {
						out.Records = make([]SCSuccessRecord, 0, 1)
					} else {
						out.Records = []SCSuccessRecord{}
					}
				} else {
					out.Records = (out.Records)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SCSuccessRecord
					(v1).UnmarshalEasyJSON(in)
					out.Records = append(out.Records, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				in.Delim('[')
				if out.Name == nil {
					if !in.IsDelim(']') {
						out.Name = make([]string, 0, 4)
					} else {
						out.Name = []string{}
					}
				} else {
					out.Name = (out.Name)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Name = append(out.Name, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "thub":
			if in.IsNull() {
				in.Skip()
				out.Thub = nil
			} else {
				in.Delim('[')
				if out.Thub == nil {
					if !in.IsDelim(']') {
						out.Thub = make([]string, 0, 4)
					} else {
						out.Thub = []string{}
					}
				} else {
					out.Thub = (out.Thub)[:0]
				}
				for !in.IsDelim(']') {
					var v3 string
					v3 = string(in.String())
					out.Thub = append(out.Thub, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "state":
			if in.IsNull() {
				in.Skip()
				out.State = nil
			} else {
				in.Delim('[')
				if out.State == nil {
					if !in.IsDelim(']') {
						out.State = make([]int, 0, 8)
					} else {
						out.State = []int{}
					}
				} else {
					out.State = (out.State)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.State = append(out.State, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "exchange":
			if in.IsNull() {
				in.Skip()
				out.Exchange = nil
			} else {
				in.Delim('[')
				if out.Exchange == nil {
					if !in.IsDelim(']') {
						out.Exchange = make([]int, 0, 8)
					} else {
						out.Exchange = []int{}
					}
				} else {
					out.Exchange = (out.Exchange)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.Exchange = append(out.Exchange, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg(out *jwriter.Writer, in SCWawaList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Records == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Records {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Name == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Name {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"thub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Thub == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.Thub {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.String(string(v11))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.State == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.State {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Exchange == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Exchange {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCWawaList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCWawaList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCWawaList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCWawaList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg1(in *jlexer.Lexer, out *SCWaWaExchangeRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			(out.List).UnmarshalEasyJSON(in)
		case "gold":
			out.Gold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg1(out *jwriter.Writer, in SCWaWaExchangeRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.List).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Gold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCWaWaExchangeRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCWaWaExchangeRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCWaWaExchangeRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCWaWaExchangeRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg1(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg2(in *jlexer.Lexer, out *SCUserInfoRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "nick":
			out.NickName = string(in.String())
		case "head":
			out.HeadURL = string(in.String())
		case "sex":
			out.Gender = bool(in.Bool())
		case "gold":
			out.Gold = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg2(out *jwriter.Writer, in SCUserInfoRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HeadURL))
	}
	{
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Gender))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Gold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCUserInfoRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCUserInfoRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCUserInfoRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCUserInfoRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg2(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg3(in *jlexer.Lexer, out *SCTradeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserID = int(in.Int())
		case "nick":
			out.UserNick = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "itemID":
			out.ItemID = int(in.Int())
		case "cost":
			out.Cost = int(in.Int())
		case "gold":
			out.Gold = int(in.Int())
		case "des":
			out.Description = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "state":
			out.State = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg3(out *jwriter.Writer, in SCTradeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.UserID))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserNick))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"itemID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ItemID))
	}
	{
		const prefix string = ",\"cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Gold))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCTradeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCTradeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCTradeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCTradeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg3(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg4(in *jlexer.Lexer, out *SCTimeUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			out.TimeCountDown = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg4(out *jwriter.Writer, in SCTimeUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.TimeCountDown))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCTimeUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCTimeUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCTimeUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCTimeUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg4(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg5(in *jlexer.Lexer, out *SCTableInfoRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "dev":
			(out.Device).UnmarshalEasyJSON(in)
		case "num":
			out.TableCount = int(in.Int())
		case "id":
			out.BigRoomID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg5(out *jwriter.Writer, in SCTableInfoRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"dev\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Device).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"num\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TableCount))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BigRoomID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCTableInfoRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCTableInfoRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCTableInfoRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCTableInfoRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg5(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg6(in *jlexer.Lexer, out *SCSuccessRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.UserID = string(in.String())
		case "user":
			out.UserNick = string(in.String())
		case "head":
			out.UserHead = string(in.String())
		case "date":
			out.Date = string(in.String())
		case "video":
			out.Video = string(in.String())
		case "deviceID":
			out.DeviceID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg6(out *jwriter.Writer, in SCSuccessRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserNick))
	}
	{
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserHead))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	{
		const prefix string = ",\"video\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Video))
	}
	{
		const prefix string = ",\"deviceID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCSuccessRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCSuccessRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCSuccessRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCSuccessRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg6(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg7(in *jlexer.Lexer, out *SCSuccessRank) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rank":
			out.SelfRank = int(in.Int())
		case "score":
			out.SelfScore = int(in.Int())
		case "users":
			if in.IsNull() {
				in.Skip()
				out.UserNicks = nil
			} else {
				in.Delim('[')
				if out.UserNicks == nil {
					if !in.IsDelim(']') {
						out.UserNicks = make([]string, 0, 4)
					} else {
						out.UserNicks = []string{}
					}
				} else {
					out.UserNicks = (out.UserNicks)[:0]
				}
				for !in.IsDelim(']') {
					var v16 string
					v16 = string(in.String())
					out.UserNicks = append(out.UserNicks, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "counts":
			if in.IsNull() {
				in.Skip()
				out.SuccessCount = nil
			} else {
				in.Delim('[')
				if out.SuccessCount == nil {
					if !in.IsDelim(']') {
						out.SuccessCount = make([]string, 0, 4)
					} else {
						out.SuccessCount = []string{}
					}
				} else {
					out.SuccessCount = (out.SuccessCount)[:0]
				}
				for !in.IsDelim(']') {
					var v17 string
					v17 = string(in.String())
					out.SuccessCount = append(out.SuccessCount, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "head":
			if in.IsNull() {
				in.Skip()
				out.UserHead = nil
			} else {
				in.Delim('[')
				if out.UserHead == nil {
					if !in.IsDelim(']') {
						out.UserHead = make([]string, 0, 4)
					} else {
						out.UserHead = []string{}
					}
				} else {
					out.UserHead = (out.UserHead)[:0]
				}
				for !in.IsDelim(']') {
					var v18 string
					v18 = string(in.String())
					out.UserHead = append(out.UserHead, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg7(out *jwriter.Writer, in SCSuccessRank) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rank\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SelfRank))
	}
	{
		const prefix string = ",\"score\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SelfScore))
	}
	{
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserNicks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.UserNicks {
				if v19 > 0 {
					out.RawByte(',')
				}
				out.String(string(v20))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"counts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SuccessCount == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.SuccessCount {
				if v21 > 0 {
					out.RawByte(',')
				}
				out.String(string(v22))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.UserHead == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.UserHead {
				if v23 > 0 {
					out.RawByte(',')
				}
				out.String(string(v24))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCSuccessRank) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCSuccessRank) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCSuccessRank) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCSuccessRank) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg7(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg8(in *jlexer.Lexer, out *SCSuccessList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			if in.IsNull() {
				in.Skip()
				out.Records = nil
			} else {
				in.Delim('[')
				if out.Records == nil {
					if !in.IsDelim(']') {
						out.Records = make([]SCSuccessRecord, 0, 1)
					} else {
						out.Records = []SCSuccessRecord{}
					}
				} else {
					out.Records = (out.Records)[:0]
				}
				for !in.IsDelim(']') {
					var v25 SCSuccessRecord
					(v25).UnmarshalEasyJSON(in)
					out.Records = append(out.Records, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg8(out *jwriter.Writer, in SCSuccessList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Records == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Records {
				if v26 > 0 {
					out.RawByte(',')
				}
				(v27).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCSuccessList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCSuccessList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCSuccessList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCSuccessList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg8(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg9(in *jlexer.Lexer, out *SCShopItemInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shopID":
			out.ID = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "des":
			out.ShopDes = string(in.String())
		case "extra":
			out.ExtraDes = string(in.String())
		case "type":
			out.Type = int(in.Int())
		case "ext":
			out.ExtraGot = int(in.Int())
		case "cost":
			out.Cost = int(in.Int())
		case "gold":
			out.Gold = int(in.Int())
		case "url":
			out.ImageURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg9(out *jwriter.Writer, in SCShopItemInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"shopID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShopDes))
	}
	{
		const prefix string = ",\"extra\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ExtraDes))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Type))
	}
	{
		const prefix string = ",\"ext\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ExtraGot))
	}
	{
		const prefix string = ",\"cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Gold))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImageURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCShopItemInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCShopItemInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCShopItemInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCShopItemInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg9(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg10(in *jlexer.Lexer, out *SCShopInfos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			(out.AllItems).UnmarshalEasyJSON(in)
		case "cards":
			out.CardState = int(in.Int())
		case "states":
			out.GetState = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg10(out *jwriter.Writer, in SCShopInfos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.AllItems).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cards\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CardState))
	}
	{
		const prefix string = ",\"states\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GetState))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCShopInfos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCShopInfos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCShopInfos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCShopInfos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg10(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg11(in *jlexer.Lexer, out *SCRoomLast2Players) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v28 := 0
				for !in.IsDelim(']') {
					if v28 < 2 {
						out.Users[v28] = string(in.String())
						v28++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "heads":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v29 := 0
				for !in.IsDelim(']') {
					if v29 < 2 {
						out.Heads[v29] = string(in.String())
						v29++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg11(out *jwriter.Writer, in SCRoomLast2Players) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v30 := range in.Users {
			if v30 > 0 {
				out.RawByte(',')
			}
			out.String(string(in.Users[v30]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"heads\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawByte('[')
		for v31 := range in.Heads {
			if v31 > 0 {
				out.RawByte(',')
			}
			out.String(string(in.Heads[v31]))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCRoomLast2Players) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCRoomLast2Players) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCRoomLast2Players) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCRoomLast2Players) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg11(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg12(in *jlexer.Lexer, out *SCRoomInfoRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Success = bool(in.Bool())
		case "tables":
			if in.IsNull() {
				in.Skip()
				out.Devices = nil
			} else {
				in.Delim('[')
				if out.Devices == nil {
					if !in.IsDelim(']') {
						out.Devices = make([]SCTableInfoRet, 0, 1)
					} else {
						out.Devices = []SCTableInfoRet{}
					}
				} else {
					out.Devices = (out.Devices)[:0]
				}
				for !in.IsDelim(']') {
					var v32 SCTableInfoRet
					(v32).UnmarshalEasyJSON(in)
					out.Devices = append(out.Devices, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg12(out *jwriter.Writer, in SCRoomInfoRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"tables\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Devices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v33, v34 := range in.Devices {
				if v33 > 0 {
					out.RawByte(',')
				}
				(v34).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCRoomInfoRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCRoomInfoRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCRoomInfoRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCRoomInfoRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg12(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg13(in *jlexer.Lexer, out *SCRoomChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			out.UserNick = string(in.String())
		case "chat":
			out.ChatInfo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg13(out *jwriter.Writer, in SCRoomChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserNick))
	}
	{
		const prefix string = ",\"chat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChatInfo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCRoomChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCRoomChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCRoomChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCRoomChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg13(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg14(in *jlexer.Lexer, out *SCPrePayID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.PrePayID = string(in.String())
		case "trade":
			out.TradeNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg14(out *jwriter.Writer, in SCPrePayID) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PrePayID))
	}
	{
		const prefix string = ",\"trade\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCPrePayID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCPrePayID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCPrePayID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCPrePayID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg14(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg15(in *jlexer.Lexer, out *SCOneRecord) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			(out.Records).UnmarshalEasyJSON(in)
		case "addr":
			(out.Address).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg15(out *jwriter.Writer, in SCOneRecord) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Records).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Address).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCOneRecord) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCOneRecord) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCOneRecord) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCOneRecord) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg15(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg16(in *jlexer.Lexer, out *SCMainInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mailID":
			out.ID = string(in.String())
		case "sys":
			out.SystemMsg = bool(in.Bool())
		case "title":
			out.Title = string(in.String())
		case "mail":
			out.MailDes = string(in.String())
		case "read":
			out.Read = bool(in.Bool())
		case "reward":
			out.Reward = int(in.Int())
		case "date":
			out.Date = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg16(out *jwriter.Writer, in SCMainInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mailID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"sys\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.SystemMsg))
	}
	{
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"mail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MailDes))
	}
	{
		const prefix string = ",\"read\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Read))
	}
	{
		const prefix string = ",\"reward\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Reward))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Date))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCMainInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCMainInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCMainInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCMainInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg16(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg17(in *jlexer.Lexer, out *SCLoginRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "register":
			out.Register = bool(in.Bool())
		case "lastplace":
			out.LastPlace = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "pub":
			out.PublicNotice = string(in.String())
		case "iosStore":
			out.IOSAppStore = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg17(out *jwriter.Writer, in SCLoginRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"register\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Register))
	}
	{
		const prefix string = ",\"lastplace\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastPlace))
	}
	{
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"pub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PublicNotice))
	}
	{
		const prefix string = ",\"iosStore\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.IOSAppStore))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCLoginRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCLoginRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCLoginRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCLoginRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg17(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg18(in *jlexer.Lexer, out *SCInviteUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ac":
			out.UserAC = string(in.String())
		case "nick":
			out.UserNick = string(in.String())
		case "head":
			out.UserHead = string(in.String())
		case "money":
			out.Money = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg18(out *jwriter.Writer, in SCInviteUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ac\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserAC))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserNick))
	}
	{
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserHead))
	}
	{
		const prefix string = ",\"money\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Money))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCInviteUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCInviteUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCInviteUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCInviteUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg18(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg19(in *jlexer.Lexer, out *SCInviteInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "left":
			out.LeftReward = int(in.Int())
		case "binded":
			out.BindedUser = string(in.String())
		case "binders":
			if in.IsNull() {
				in.Skip()
				out.Binders = nil
			} else {
				in.Delim('[')
				if out.Binders == nil {
					if !in.IsDelim(']') {
						out.Binders = make([]SCInviteUserInfo, 0, 1)
					} else {
						out.Binders = []SCInviteUserInfo{}
					}
				} else {
					out.Binders = (out.Binders)[:0]
				}
				for !in.IsDelim(']') {
					var v35 SCInviteUserInfo
					(v35).UnmarshalEasyJSON(in)
					out.Binders = append(out.Binders, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg19(out *jwriter.Writer, in SCInviteInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"left\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LeftReward))
	}
	{
		const prefix string = ",\"binded\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BindedUser))
	}
	{
		const prefix string = ",\"binders\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Binders == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.Binders {
				if v36 > 0 {
					out.RawByte(',')
				}
				(v37).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCInviteInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCInviteInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCInviteInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCInviteInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg19(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg20(in *jlexer.Lexer, out *SCDeviceRegRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.Success = bool(in.Bool())
		case "user":
			out.UserID = int64(in.Int64())
		case "des":
			out.Destription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg20(out *jwriter.Writer, in SCDeviceRegRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UserID))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCDeviceRegRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCDeviceRegRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCDeviceRegRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCDeviceRegRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg20(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg21(in *jlexer.Lexer, out *SCDeviceInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = int(in.Int())
		case "group":
			out.Group = int(in.Int())
		case "sub":
			out.SubGroup = int(in.Int())
		case "id":
			out.DeviceID = string(in.String())
		case "rtmp1":
			out.RtmpURL1 = string(in.String())
		case "rtmp2":
			out.RtmpURL2 = string(in.String())
		case "des":
			out.Destription = string(in.String())
		case "thub":
			out.Thumbnail = string(in.String())
		case "cost":
			out.Cost = int(in.Int())
		case "desImgUrl":
			out.DesImg = string(in.String())
		case "play":
			out.Play = int(in.Int())
		case "success":
			out.Success = int(in.Int())
		case "left":
			out.LeftCount = int(in.Int())
		case "force":
			out.Force = int(in.Int())
		case "exchange":
			out.Exchange = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg21(out *jwriter.Writer, in SCDeviceInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Group))
	}
	{
		const prefix string = ",\"sub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.SubGroup))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"rtmp1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RtmpURL1))
	}
	{
		const prefix string = ",\"rtmp2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RtmpURL2))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destription))
	}
	{
		const prefix string = ",\"thub\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Thumbnail))
	}
	{
		const prefix string = ",\"cost\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Cost))
	}
	{
		const prefix string = ",\"desImgUrl\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DesImg))
	}
	{
		const prefix string = ",\"play\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Play))
	}
	{
		const prefix string = ",\"success\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Success))
	}
	{
		const prefix string = ",\"left\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.LeftCount))
	}
	{
		const prefix string = ",\"force\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Force))
	}
	{
		const prefix string = ",\"exchange\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Exchange))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCDeviceInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCDeviceInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCDeviceInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCDeviceInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg21(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg22(in *jlexer.Lexer, out *SCDeviceCoin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "did":
			out.DeviceID = string(in.String())
		case "rid":
			out.BigRoomID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg22(out *jwriter.Writer, in SCDeviceCoin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"did\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"rid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BigRoomID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCDeviceCoin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCDeviceCoin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCDeviceCoin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCDeviceCoin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg22(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg23(in *jlexer.Lexer, out *SCDeviceAction) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.DeviceID = string(in.String())
		case "action":
			out.Action = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg23(out *jwriter.Writer, in SCDeviceAction) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"action\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Action))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCDeviceAction) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCDeviceAction) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCDeviceAction) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCDeviceAction) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg23(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg24(in *jlexer.Lexer, out *SCCoinRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.Success = bool(in.Bool())
		case "gold":
			out.Gold = int64(in.Int64())
		case "des":
			out.Destription = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg24(out *jwriter.Writer, in SCCoinRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Gold))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Destription))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCCoinRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCCoinRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCCoinRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCCoinRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg24(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg25(in *jlexer.Lexer, out *SCCheckInCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "today":
			out.Today = bool(in.Bool())
		case "sign":
			out.Count = int(in.Int())
		case "gold":
			out.Gold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg25(out *jwriter.Writer, in SCCheckInCount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"today\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Today))
	}
	{
		const prefix string = ",\"sign\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Gold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCCheckInCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCCheckInCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCCheckInCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCCheckInCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg25(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg26(in *jlexer.Lexer, out *SCBuyResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = int(in.Int())
		case "des":
			out.Description = string(in.String())
		case "gold":
			out.NowGold = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg26(out *jwriter.Writer, in SCBuyResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.State))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NowGold))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCBuyResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCBuyResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCBuyResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCBuyResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg26(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg27(in *jlexer.Lexer, out *SCBindRet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "state":
			out.State = bool(in.Bool())
		case "des":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg27(out *jwriter.Writer, in SCBindRet) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"state\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.State))
	}
	{
		const prefix string = ",\"des\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCBindRet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCBindRet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCBindRet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCBindRet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg27(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg28(in *jlexer.Lexer, out *SCBGUserInfoSum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]SCBGUserInfo, 0, 1)
					} else {
						out.Users = []SCBGUserInfo{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v38 SCBGUserInfo
					(v38).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cur":
			out.CurPage = int(in.Int())
		case "total":
			out.TotalPage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg28(out *jwriter.Writer, in SCBGUserInfoSum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Users {
				if v39 > 0 {
					out.RawByte(',')
				}
				(v40).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurPage))
	}
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCBGUserInfoSum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCBGUserInfoSum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCBGUserInfoSum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCBGUserInfoSum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg28(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg29(in *jlexer.Lexer, out *SCBGUserInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "nick":
			out.NickName = string(in.String())
		case "sex":
			out.Gender = bool(in.Bool())
		case "gold":
			out.Gold = int64(in.Int64())
		case "date":
			out.RegisterDate = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg29(out *jwriter.Writer, in SCBGUserInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Gender))
	}
	{
		const prefix string = ",\"gold\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.Gold))
	}
	{
		const prefix string = ",\"date\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RegisterDate))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCBGUserInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCBGUserInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCBGUserInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCBGUserInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg29(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg30(in *jlexer.Lexer, out *SCBGRecordSum) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "records":
			if in.IsNull() {
				in.Skip()
				out.Records = nil
			} else {
				in.Delim('[')
				if out.Records == nil {
					if !in.IsDelim(']') {
						out.Records = make([]SCOneRecord, 0, 1)
					} else {
						out.Records = []SCOneRecord{}
					}
				} else {
					out.Records = (out.Records)[:0]
				}
				for !in.IsDelim(']') {
					var v41 SCOneRecord
					(v41).UnmarshalEasyJSON(in)
					out.Records = append(out.Records, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cur":
			out.CurPage = int(in.Int())
		case "total":
			out.TotalPage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg30(out *jwriter.Writer, in SCBGRecordSum) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"records\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Records == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v42, v43 := range in.Records {
				if v42 > 0 {
					out.RawByte(',')
				}
				(v43).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurPage))
	}
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCBGRecordSum) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCBGRecordSum) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCBGRecordSum) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCBGRecordSum) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg30(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg31(in *jlexer.Lexer, out *SCAllTradeInfos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trades":
			if in.IsNull() {
				in.Skip()
				out.Trades = nil
			} else {
				in.Delim('[')
				if out.Trades == nil {
					if !in.IsDelim(']') {
						out.Trades = make([]SCTradeInfo, 0, 1)
					} else {
						out.Trades = []SCTradeInfo{}
					}
				} else {
					out.Trades = (out.Trades)[:0]
				}
				for !in.IsDelim(']') {
					var v44 SCTradeInfo
					(v44).UnmarshalEasyJSON(in)
					out.Trades = append(out.Trades, v44)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cur":
			out.CurPage = int(in.Int())
		case "total":
			out.TotalPage = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg31(out *jwriter.Writer, in SCAllTradeInfos) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trades\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Trades == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v45, v46 := range in.Trades {
				if v45 > 0 {
					out.RawByte(',')
				}
				(v46).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cur\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.CurPage))
	}
	{
		const prefix string = ",\"total\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TotalPage))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAllTradeInfos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAllTradeInfos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAllTradeInfos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAllTradeInfos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg31(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg32(in *jlexer.Lexer, out *SCAllShopItems) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "items":
			if in.IsNull() {
				in.Skip()
				out.AllItems = nil
			} else {
				in.Delim('[')
				if out.AllItems == nil {
					if !in.IsDelim(']') {
						out.AllItems = make([]SCShopItemInfo, 0, 1)
					} else {
						out.AllItems = []SCShopItemInfo{}
					}
				} else {
					out.AllItems = (out.AllItems)[:0]
				}
				for !in.IsDelim(']') {
					var v47 SCShopItemInfo
					(v47).UnmarshalEasyJSON(in)
					out.AllItems = append(out.AllItems, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg32(out *jwriter.Writer, in SCAllShopItems) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"items\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllItems == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v48, v49 := range in.AllItems {
				if v48 > 0 {
					out.RawByte(',')
				}
				(v49).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAllShopItems) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAllShopItems) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAllShopItems) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAllShopItems) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg32(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg33(in *jlexer.Lexer, out *SCAllMainInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "mail":
			if in.IsNull() {
				in.Skip()
				out.Mails = nil
			} else {
				in.Delim('[')
				if out.Mails == nil {
					if !in.IsDelim(']') {
						out.Mails = make([]SCMainInfo, 0, 1)
					} else {
						out.Mails = []SCMainInfo{}
					}
				} else {
					out.Mails = (out.Mails)[:0]
				}
				for !in.IsDelim(']') {
					var v50 SCMainInfo
					(v50).UnmarshalEasyJSON(in)
					out.Mails = append(out.Mails, v50)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg33(out *jwriter.Writer, in SCAllMainInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"mail\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Mails == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v51, v52 := range in.Mails {
				if v51 > 0 {
					out.RawByte(',')
				}
				(v52).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAllMainInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAllMainInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAllMainInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAllMainInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg33(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg34(in *jlexer.Lexer, out *SCAllDevices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "devices":
			if in.IsNull() {
				in.Skip()
				out.AllDevices = nil
			} else {
				in.Delim('[')
				if out.AllDevices == nil {
					if !in.IsDelim(']') {
						out.AllDevices = make([]SCDeviceInfo, 0, 1)
					} else {
						out.AllDevices = []SCDeviceInfo{}
					}
				} else {
					out.AllDevices = (out.AllDevices)[:0]
				}
				for !in.IsDelim(']') {
					var v53 SCDeviceInfo
					(v53).UnmarshalEasyJSON(in)
					out.AllDevices = append(out.AllDevices, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg34(out *jwriter.Writer, in SCAllDevices) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"devices\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.AllDevices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v54, v55 := range in.AllDevices {
				if v54 > 0 {
					out.RawByte(',')
				}
				(v55).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAllDevices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAllDevices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAllDevices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAllDevices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg34(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg35(in *jlexer.Lexer, out *SCAddresss) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "addrs":
			if in.IsNull() {
				in.Skip()
				out.Addresss = nil
			} else {
				in.Delim('[')
				if out.Addresss == nil {
					if !in.IsDelim(']') {
						out.Addresss = make([]SCAddressInfo, 0, 1)
					} else {
						out.Addresss = []SCAddressInfo{}
					}
				} else {
					out.Addresss = (out.Addresss)[:0]
				}
				for !in.IsDelim(']') {
					var v56 SCAddressInfo
					(v56).UnmarshalEasyJSON(in)
					out.Addresss = append(out.Addresss, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg35(out *jwriter.Writer, in SCAddresss) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"addrs\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Addresss == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v57, v58 := range in.Addresss {
				if v57 > 0 {
					out.RawByte(',')
				}
				(v58).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAddresss) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAddresss) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAddresss) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAddresss) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg35(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg36(in *jlexer.Lexer, out *SCAddressInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "tel":
			out.Tel = string(in.String())
		case "area":
			out.Area = string(in.String())
		case "addr":
			out.Addr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg36(out *jwriter.Writer, in SCAddressInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"tel\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Tel))
	}
	{
		const prefix string = ",\"area\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Area))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Addr))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCAddressInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCAddressInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCAddressInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCAddressInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg36(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg37(in *jlexer.Lexer, out *SCActivesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actives":
			if in.IsNull() {
				in.Skip()
				out.Actives = nil
			} else {
				in.Delim('[')
				if out.Actives == nil {
					if !in.IsDelim(']') {
						out.Actives = make([]SCActiveInfo, 0, 2)
					} else {
						out.Actives = []SCActiveInfo{}
					}
				} else {
					out.Actives = (out.Actives)[:0]
				}
				for !in.IsDelim(']') {
					var v59 SCActiveInfo
					(v59).UnmarshalEasyJSON(in)
					out.Actives = append(out.Actives, v59)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg37(out *jwriter.Writer, in SCActivesInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actives\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Actives == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v60, v61 := range in.Actives {
				if v60 > 0 {
					out.RawByte(',')
				}
				(v61).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCActivesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCActivesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCActivesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCActivesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg37(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg38(in *jlexer.Lexer, out *SCActiveInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ActiveID = int(in.Int())
		case "url":
			out.ImgURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg38(out *jwriter.Writer, in SCActiveInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.ActiveID))
	}
	{
		const prefix string = ",\"url\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ImgURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SCActiveInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SCActiveInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SCActiveInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SCActiveInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg38(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg39(in *jlexer.Lexer, out *CSWaWaExchange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "idx":
			out.WaWaID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg39(out *jwriter.Writer, in CSWaWaExchange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"idx\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.WaWaID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSWaWaExchange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSWaWaExchange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSWaWaExchange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSWaWaExchange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg39(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg40(in *jlexer.Lexer, out *CSSuccessList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "did":
			out.DeviceID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg40(out *jwriter.Writer, in CSSuccessList) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"did\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSSuccessList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSSuccessList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSSuccessList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSSuccessList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg40(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg41(in *jlexer.Lexer, out *CSShareDone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "place":
			out.SharePlace = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg41(out *jwriter.Writer, in CSShareDone) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"place\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SharePlace))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSShareDone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSShareDone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSShareDone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSShareDone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg41(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg42(in *jlexer.Lexer, out *CSRoomChat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.DeviceID = string(in.String())
		case "chat":
			out.ChatInfo = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg42(out *jwriter.Writer, in CSRoomChat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeviceID))
	}
	{
		const prefix string = ",\"chat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ChatInfo))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRoomChat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRoomChat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRoomChat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRoomChat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg42(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg43(in *jlexer.Lexer, out *CSRegister) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Username = string(in.String())
		case "pwd":
			out.Password = string(in.String())
		case "nick":
			out.NickName = string(in.String())
		case "head":
			out.HeadURL = string(in.String())
		case "sex":
			out.Gender = bool(in.Bool())
		case "openid":
			out.OpenID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg43(out *jwriter.Writer, in CSRegister) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"pwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	{
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NickName))
	}
	{
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HeadURL))
	}
	{
		const prefix string = ",\"sex\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.Gender))
	}
	{
		const prefix string = ",\"openid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OpenID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSRegister) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSRegister) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSRegister) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSRegister) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg43(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg44(in *jlexer.Lexer, out *CSQueryRoomInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.GameID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg44(out *jwriter.Writer, in CSQueryRoomInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.GameID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSQueryRoomInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSQueryRoomInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSQueryRoomInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSQueryRoomInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg44(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg45(in *jlexer.Lexer, out *CSLogin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "account":
			out.Username = string(in.String())
		case "pwd":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg45(out *jwriter.Writer, in CSLogin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"account\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"pwd\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSLogin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSLogin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSLogin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSLogin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg45(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg46(in *jlexer.Lexer, out *CSBuyItem) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "shopID":
			out.ShopID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg46(out *jwriter.Writer, in CSBuyItem) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"shopID\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ShopID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSBuyItem) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSBuyItem) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSBuyItem) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSBuyItem) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg46(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg47(in *jlexer.Lexer, out *CSBuyDone) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "trade":
			out.TradeNumber = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg47(out *jwriter.Writer, in CSBuyDone) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"trade\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.TradeNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSBuyDone) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSBuyDone) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSBuyDone) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSBuyDone) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg47(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg48(in *jlexer.Lexer, out *CSBindCode) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg48(out *jwriter.Writer, in CSBindCode) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSBindCode) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSBindCode) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSBindCode) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSBindCode) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg48(l, v)
}
func easyjson87c59537DecodeZhuawawaMsg49(in *jlexer.Lexer, out *CSAskDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ids":
			out.DeliveryIDs = string(in.String())
		case "addr":
			(out.Address).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson87c59537EncodeZhuawawaMsg49(out *jwriter.Writer, in CSAskDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DeliveryIDs))
	}
	{
		const prefix string = ",\"addr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Address).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CSAskDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson87c59537EncodeZhuawawaMsg49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CSAskDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson87c59537EncodeZhuawawaMsg49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CSAskDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson87c59537DecodeZhuawawaMsg49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CSAskDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson87c59537DecodeZhuawawaMsg49(l, v)
}
